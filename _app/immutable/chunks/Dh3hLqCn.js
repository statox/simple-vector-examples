const w=/^(\[)?(\.\.\.)?(\w+)(?:=(\w+))?(\])?$/;function b(t){const i=[];return{pattern:t==="/"?/^\/$/:new RegExp(`^${_(t).map(a=>{const o=/^\[\.\.\.(\w+)(?:=(\w+))?\]$/.exec(a);if(o)return i.push({name:o[1],matcher:o[2],optional:!1,rest:!0,chained:!0}),"(?:/([^]*))?";const c=/^\[\[(\w+)(?:=(\w+))?\]\]$/.exec(a);if(c)return i.push({name:c[1],matcher:c[2],optional:!0,rest:!1,chained:!0}),"(?:/([^/]+))?";if(!a)return;const r=a.split(/\[(.+?)\](?!\])/);return"/"+r.map((e,s)=>{if(s%2){if(e.startsWith("x+"))return h(String.fromCharCode(parseInt(e.slice(2),16)));if(e.startsWith("u+"))return h(String.fromCharCode(...e.slice(2).split("-").map(g=>parseInt(g,16))));const l=w.exec(e),[,u,p,m,d]=l;return i.push({name:m,matcher:d,optional:!!u,rest:!!p,chained:p?s===1&&r[0]==="":!1}),p?"([^]*?)":u?"([^/]*)?":"([^/]+?)"}return h(e)}).join("")}).join("")}/?$`),params:i}}function $(t){return t!==""&&!/^\([^)]+\)$/.test(t)}function _(t){return t.slice(1).split("/").filter($)}function j(t,i,f){const a={},o=t.slice(1),c=o.filter(n=>n!==void 0);let r=0;for(let n=0;n<i.length;n+=1){const e=i[n];let s=o[n-r];if(e.chained&&e.rest&&r&&(s=o.slice(n-r,n+1).filter(l=>l).join("/"),r=0),s===void 0){e.rest&&(a[e.name]="");continue}if(!e.matcher||f[e.matcher](s)){a[e.name]=s;const l=i[n+1],u=o[n+1];l&&!l.rest&&l.optional&&u&&e.chained&&(r=0),!l&&!u&&Object.keys(a).length===c.length&&(r=0);continue}if(e.optional&&e.chained){r++;continue}return}if(!r)return a}function h(t){return t.normalize().replace(/[[\]]/g,"\\$&").replace(/%/g,"%25").replace(/\//g,"%2[Ff]").replace(/\?/g,"%3[Ff]").replace(/#/g,"%23").replace(/[.*+?^${}()|\\]/g,"\\$&")}const v=/\[(\[)?(\.\.\.)?(\w+?)(?:=(\w+))?\]\]?/g;function W(t,i){const f=_(t),a=t!="/"&&t.endsWith("/");return"/"+f.map(o=>o.replace(v,(c,r,n,e)=>{const s=i[e];if(!s){if(r||n&&s!==void 0)return"";throw new Error(`Missing parameter '${e}' in route ${t}`)}if(s.startsWith("/")||s.endsWith("/"))throw new Error(`Parameter '${e}' in route ${t} cannot start or end with a slash -- this would cause an invalid route like foo//bar`);return s})).filter(Boolean).join("/")+(a?"/":"")}const x=globalThis.__sveltekit_lslsji?.base??"/simple-vector-examples",k=globalThis.__sveltekit_lslsji?.assets??x;export{k as a,x as b,j as e,b as p,W as r};
