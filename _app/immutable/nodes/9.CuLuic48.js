import"../chunks/DsnmJJEf.js";import"../chunks/WlWXf2W6.js";import{p as R,s as x,a as S,f as u,e as l,b as B,g as e,c as d,d as W,$ as o,u as f,h as $,a0 as n,_ as g}from"../chunks/DN2LkAR_.js";import{M as ce}from"../chunks/y-0iLokV.js";import{a as b}from"../chunks/BenD77kU.js";import{i as X}from"../chunks/CJZpPb5V.js";import{r as k}from"../chunks/BCauGnmc.js";import{a as Z,b as j}from"../chunks/CfHCFXmM.js";import{M as O}from"../chunks/BnX5XO6O.js";import{V as ee}from"../chunks/Gnf6quZY.js";var se=u('<span class="input">min bound</span> <input type="number"/>',1),ie=u("<h3><code> </code></h3>"),le=u("<h3><code> </code></h3>"),pe=u('<h3>Clamp magnitude</h3> <div class="input-container svelte-hm5246"><span>Enable min bound</span> <input type="checkbox"/> <span class="input">max bound</span> <input type="number"/> <!></div> <div class="results svelte-hm5246"><div><!> <!></div></div>',1);function me(z,C){R(C,!0);let r=x(3),c=x(1.5),v=x(!0),p=x(S(new ee(0,4))),q=f(()=>{try{return e(v)?e(p).clone().clampMag(e(r),e(c)):e(p).clone().clampMag(e(r))}catch{return e(p).clone().zero()}});const G=f(()=>[{name:"v1",vec:e(p),color:"#00FF00",onUpdate:s=>{$(p,s.clone().fixPrecision(1),!0)},isDraggable:!0}]),H=f(()=>[...e(G),{name:e(v)?`v1.clampMag(${e(r)}, ${e(c)})`:`v1.clampMag(${e(r)})`,vec:e(q),color:"#6e6ef4",isDraggable:!1}]),D={size:10,graduation:1};var I=pe(),w=l(B(I),2),E=l(o(w),2);k(E);var M=l(E,4);k(M);var P=l(M,2);{var F=s=>{var _=se(),h=l(B(_),2);k(h),j(h,()=>e(c),y=>$(c,y)),d(s,_)};X(P,s=>{e(v)&&s(F)})}n(w);var Y=l(w,2),A=o(Y),T=o(A);{var J=s=>{var _=ie(),h=o(_),y=o(h);n(h),n(_),g(()=>b(y,`v1.clampMag(${e(r)??""}, ${e(c)??""})`)),d(s,_)},U=s=>{var _=le(),h=o(_),y=o(h);n(h),n(_),g(()=>b(y,`v1.clampMag(${e(r)??""})`)),d(s,_)};X(T,s=>{e(v)?s(J):s(U,!1)})}var V=l(T,2);O(V,{get grid(){return D},get vectors(){return e(H)}}),n(A),n(Y),Z(E,()=>e(v),s=>$(v,s)),j(M,()=>e(r),s=>$(r,s)),d(z,I),W()}var de=u('<span class="input">min bound</span> <input type="number"/>',1),ue=u("<h3><code> </code></h3>"),_e=u("<h3><code> </code></h3>"),he=u("<h3><code> </code></h3>"),fe=u("<h3><code> </code></h3>"),ge=u("<h3><code> </code></h3>"),be=u("<h3><code> </code></h3>"),xe=u('<h3>Clamp axes</h3> <div class="input-container svelte-hm5246"><span>Enable min bound</span> <input type="checkbox"/> <span class="input">max bound</span> <input type="number"/> <!></div> <div class="results svelte-hm5246"><div><!> <!></div> <div><!> <!></div> <div><!> <!></div></div>',1);function $e(z,C){R(C,!0);let r=x(2),c=x(-2),v=x(!0),p=x(S(new ee(0,4))),q=f(()=>{try{return e(v)?e(p).clone().clampX(e(r),e(c)):e(p).clone().clampX(e(r))}catch{return e(p).clone().zero()}}),G=f(()=>{try{return e(v)?e(p).clone().clampY(e(r),e(c)):e(p).clone().clampY(e(r))}catch{return e(p).clone().zero()}}),H=f(()=>{try{return e(v)?e(p).clone().clampAxes(e(r),e(c)):e(p).clone().clampY(e(r))}catch{return e(p).clone().zero()}});const D=f(()=>[{name:"v1",vec:e(p),color:"#00FF00",onUpdate:a=>{$(p,a.clone().fixPrecision(1),!0)},isDraggable:!0}]),I=f(()=>[...e(D),{name:e(v)?`v1.clampX(${e(r)}, ${e(c)})`:`v1.clampX(${e(r)})`,vec:e(q),color:"#6e6ef4",isDraggable:!1}]),w=f(()=>[...e(D),{name:e(v)?`v1.clampY(${e(r)}, ${e(c)})`:`v1.clampY(${e(r)})`,vec:e(G),color:"#f46ef4",isDraggable:!1}]),E=f(()=>[...e(D),{name:e(v)?`v1.clampAxes(${e(r)}, ${e(c)})`:`v1.clampAxes(${e(r)})`,vec:e(H),color:"#b16ef4",isDraggable:!1}]),M={size:10,graduation:1};var P=xe(),F=l(B(P),2),Y=l(o(F),2);k(Y);var A=l(Y,4);k(A);var T=l(A,2);{var J=a=>{var t=de(),i=l(B(t),2);k(i),j(i,()=>e(c),m=>$(c,m)),d(a,t)};X(T,a=>{e(v)&&a(J)})}n(F);var U=l(F,2),V=o(U),s=o(V);{var _=a=>{var t=ue(),i=o(t),m=o(i);n(i),n(t),g(()=>b(m,`v1.clampX(${e(r)??""}, ${e(c)??""})`)),d(a,t)},h=a=>{var t=_e(),i=o(t),m=o(i);n(i),n(t),g(()=>b(m,`v1.clampX(${e(r)??""})`)),d(a,t)};X(s,a=>{e(v)?a(_):a(h,!1)})}var y=l(s,2);O(y,{get grid(){return M},get vectors(){return e(I)}}),n(V);var K=l(V,2),L=o(K);{var ae=a=>{var t=he(),i=o(t),m=o(i);n(i),n(t),g(()=>b(m,`v1.clampY(${e(r)??""}, ${e(c)??""})`)),d(a,t)},re=a=>{var t=fe(),i=o(t),m=o(i);n(i),n(t),g(()=>b(m,`v1.clampY(${e(r)??""})`)),d(a,t)};X(L,a=>{e(v)?a(ae):a(re,!1)})}var te=l(L,2);O(te,{get grid(){return M},get vectors(){return e(w)}}),n(K);var N=l(K,2),Q=o(N);{var oe=a=>{var t=ge(),i=o(t),m=o(i);n(i),n(t),g(()=>b(m,`v1.clampAxes(${e(r)??""}, ${e(c)??""})`)),d(a,t)},ne=a=>{var t=be(),i=o(t),m=o(i);n(i),n(t),g(()=>b(m,`v1.clampAxes(${e(r)??""})`)),d(a,t)};X(Q,a=>{e(v)?a(oe):a(ne,!1)})}var ve=l(Q,2);O(ve,{get grid(){return M},get vectors(){return e(E)}}),n(N),n(U),Z(Y,()=>e(v),a=>$(v,a)),j(A,()=>e(r),a=>$(r,a)),d(z,P),W()}var Me=u(`<!> <p>The clamp methods all take one or two parameters.</p> <p>The first parameter is always the maximum bound of the value to clamp.</p> <p>If a second parameter is provided then it is used as the minimum bound of the value to clamp. If
    it is not provided, the value is only clamped with the maxium bound.</p> <p>On this page uncheck the "Enable min bound" checkbox to stop passing a second parameter to the
    methods.</p> <!> <!>`,1);function Fe(z){var C=Me(),r=B(C);ce(r,{title:"Clamp methods"});var c=l(r,10);me(c,{});var v=l(c,2);$e(v,{}),d(z,C)}export{Fe as component};
