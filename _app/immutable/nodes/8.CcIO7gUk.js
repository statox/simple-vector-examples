import"../chunks/DsnmJJEf.js";import{z as N,L as b,M as D,A as $,C as j,D as E,F as H,G as K,B as a,v as e,N as O,I as i,x as M,J as d}from"../chunks/B6V4Mh0Q.js";import{a as s}from"../chunks/Dkdr-M-y.js";import{V as F,M as Q,a as R}from"../chunks/CPznaXQM.js";var T=$('<!> <!> <div class="results svelte-1xfkyhs"><div><code>v1.absDistanceX(v2)</code></div> <div> </div> <div><code>v1.distanceX(v2)</code></div> <div> </div> <div><code>v1.absDistanceY(v2)</code></div> <div> </div> <div><code>v1.distanceY(v2)</code></div> <div> </div> <div><code>v1.distance(v2)</code></div> <div> </div> <div><code>v1.distanceSq(v2)</code></div> <div> </div> <div><code>v1.distanceManhattan(v2)</code></div> <div> </div> <div><code>v1.distanceChebyshev(v2)</code></div> <div> </div></div>',1);function te(y,X){N(X,!0);let v=b(D(new F(0,5))),t=b(D(new F(2.5,0)));const Y=O(()=>[{name:"v1",vec:e(v),color:"#00FF00",onUpdate:r=>{M(v,r.clone().fixPrecision(1),!0)},isDraggable:!0},{name:"v2",vec:e(t),color:"#FF0000",onUpdate:r=>{M(t,r.clone().fixPrecision(1),!0)},isDraggable:!0}]);var m=T(),x=j(m);Q(x,{title:"Distance methods"});var f=a(x,2);R(f,{grid:{size:10,graduation:1},get vectors(){return e(Y)}});var h=a(f,2),c=a(i(h),2),C=i(c,!0);d(c);var o=a(c,4),q=i(o,!0);d(o);var n=a(o,4),w=i(n,!0);d(n);var _=a(n,4),z=i(_,!0);d(_);var u=a(_,4),P=i(u,!0);d(u);var l=a(u,4),S=i(l,!0);d(l);var p=a(l,4),U=i(p,!0);d(p);var g=a(p,4),V=i(g,!0);d(g),d(h),E((r,k,A,B,G,I,J,L)=>{s(C,r),s(q,k),s(w,A),s(z,B),s(P,G),s(S,I),s(U,J),s(V,L)},[()=>e(v).absDistanceX(e(t)),()=>e(v).distanceX(e(t)),()=>e(v).absDistanceY(e(t)),()=>e(v).distanceY(e(t)),()=>e(v).distance(e(t)),()=>e(v).distanceSq(e(t)),()=>e(v).distanceManhattan(e(t)),()=>e(v).distanceChebyshev(e(t))]),H(y,m),K()}export{te as component};
