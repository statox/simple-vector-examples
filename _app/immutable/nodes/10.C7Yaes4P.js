import"../chunks/DsnmJJEf.js";import{p as z,s as F,a as $,f as q,b as w,c as y,d as P,e as t,$ as o,g as e,u as r,a0 as a,h as U}from"../chunks/CY1iBhr2.js";import{M as j}from"../chunks/DoudMMjq.js";import{M as d}from"../chunks/Co6q3R2A.js";import{V as k}from"../chunks/DnDkWYNL.js";var A=q('<!> <div class="results svelte-6zq5v2"><div><h3><code>v1.invert()</code></h3> <!></div> <div><h3><code>v1.invertX()</code></h3> <!></div> <div><h3><code>v1.invertY()</code></h3> <!></div></div>',1);function J(p,u){z(u,!0);let v=F($(new k(0,3))),h=r(()=>e(v).clone().invert()),_=r(()=>e(v).clone().invertX()),b=r(()=>e(v).clone().invertY());const s=r(()=>[{name:"v1",vec:e(v),color:"#00FF00",onUpdate:V=>{U(v,V.clone().fixPrecision(1),!0)},isDraggable:!0}]),X=r(()=>[...e(s),{name:"v1.invert()",vec:e(h),color:"#6e6ef4",isDraggable:!1}]),Y=r(()=>[...e(s),{name:"v1.invertX()",vec:e(_),color:"#f46ef4",isDraggable:!1}]),D=r(()=>[...e(s),{name:"v1.invertY()",vec:e(b),color:"#b16ef4",isDraggable:!1}]),i={size:10,graduation:1};var l=A(),g=w(l);j(g,{title:"Inversion methods"});var m=t(g,2),n=o(m),I=t(o(n),2);d(I,{get grid(){return i},get vectors(){return e(X)}}),a(n);var c=t(n,2),M=t(o(c),2);d(M,{get grid(){return i},get vectors(){return e(Y)}}),a(c);var f=t(c,2),x=t(o(f),2);d(x,{get grid(){return i},get vectors(){return e(D)}}),a(f),a(m),y(p,l),P()}export{J as component};
