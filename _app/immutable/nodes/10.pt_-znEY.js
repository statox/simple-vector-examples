import"../chunks/DsnmJJEf.js";import{S as F,_ as z,$,l as q,V as w,m as y,X as C,T as t,Y as o,C as e,a0 as r,Z as a,F as P}from"../chunks/DPwOY9Ev.js";import{M as S}from"../chunks/D9YKBaSm.js";import{M as d}from"../chunks/B17B5uQ6.js";import{V as T}from"../chunks/COKwq80w.js";var U=q('<!> <div class="results svelte-6zq5v2"><div><h3><code>v1.invert()</code></h3> <!></div> <div><h3><code>v1.invertX()</code></h3> <!></div> <div><h3><code>v1.invertY()</code></h3> <!></div></div>',1);function E(p,u){F(u,!0);let v=z($(new T(0,3))),h=r(()=>e(v).clone().invert()),_=r(()=>e(v).clone().invertX()),b=r(()=>e(v).clone().invertY());const i=r(()=>[{name:"v1",vec:e(v),color:"#00FF00",onUpdate:x=>{P(v,x.clone().fixPrecision(1),!0)},isDraggable:!0}]),X=r(()=>[...e(i),{name:"v1.invert()",vec:e(h),color:"#6e6ef4",isDraggable:!1}]),Y=r(()=>[...e(i),{name:"v1.invertX()",vec:e(_),color:"#f46ef4",isDraggable:!1}]),D=r(()=>[...e(i),{name:"v1.invertY()",vec:e(b),color:"#b16ef4",isDraggable:!1}]),n={size:10,graduation:1};var l=U(),g=w(l);S(g,{title:"Inversion methods"});var m=t(g,2),s=o(m),I=t(o(s),2);d(I,{get grid(){return n},get vectors(){return e(X)}}),a(s);var c=t(s,2),M=t(o(c),2);d(M,{get grid(){return n},get vectors(){return e(Y)}}),a(c);var f=t(c,2),V=t(o(f),2);d(V,{get grid(){return n},get vectors(){return e(D)}}),a(f),a(m),y(p,l),C()}export{E as component};
