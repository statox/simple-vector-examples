import"../chunks/DsnmJJEf.js";import{S as U,_ as u,$ as _,l as $,V as k,W as z,m as C,X as S,T as r,C as e,Y as v,a0 as T,Z as o,F as f}from"../chunks/DPwOY9Ev.js";import{a as d}from"../chunks/CVJGeIlM.js";import{M as X}from"../chunks/BSFgzAEw.js";import{M as Y}from"../chunks/B17B5uQ6.js";import{V as x}from"../chunks/COKwq80w.js";var Z=$('<!> <!> <div class="results svelte-1xfkyhs"><div><code>v1.angleWith(v2)</code></div> <div> </div> <div><code>v1.angleDegWith(v2)</code></div> <div> </div> <div><code>v1.orientedAngleWith(v2)</code></div> <div> </div> <div><code>v1.orientedAngleDegWith(v2)</code></div> <div> </div></div>',1);function I(W,D){U(D,!0);let t=u(_(new x(0,5))),i=u(_(new x(2.5,0)));const A=T(()=>[{name:"v1",vec:e(t),color:"#00FF00",onUpdate:a=>{f(t,a.clone().fixPrecision(1),!0)},isDraggable:!0},{name:"v2",vec:e(i),color:"#FF0000",onUpdate:a=>{f(i,a.clone().fixPrecision(1),!0)},isDraggable:!0}]);var c=Z(),g=k(c);X(g,{title:"AngleWith methods"});var m=r(g,2);Y(m,{grid:{size:10,graduation:1},get vectors(){return e(A)}});var p=r(m,2),s=r(v(p),2),F=v(s,!0);o(s);var n=r(s,4),M=v(n,!0);o(n);var l=r(n,4),b=v(l,!0);o(l);var h=r(l,4),V=v(h,!0);o(h),o(p),z((a,w,y,P)=>{d(F,a),d(M,w),d(b,y),d(V,P)},[()=>e(t).angleWith(e(i)),()=>e(t).angleDegWith(e(i)),()=>e(t).orientedAngleWith(e(i)),()=>e(t).orientedAngleDegWith(e(i))]),C(W,c),S()}export{I as component};
