import"../chunks/DsnmJJEf.js";import{S as B,_ as b,$ as D,l as E,V as G,W as H,m as I,X as J,T as a,C as e,a0 as K,Y as i,F as M,Z as d}from"../chunks/DPwOY9Ev.js";import{a as r}from"../chunks/CVJGeIlM.js";import{M as L}from"../chunks/Dg1oJIwH.js";import{M as N}from"../chunks/JpPhfvuV.js";import{V as F}from"../chunks/COKwq80w.js";var O=E('<!> <!> <div class="results svelte-1xfkyhs"><div><code>v1.absDistanceX(v2)</code></div> <div> </div> <div><code>v1.distanceX(v2)</code></div> <div> </div> <div><code>v1.absDistanceY(v2)</code></div> <div> </div> <div><code>v1.distanceY(v2)</code></div> <div> </div> <div><code>v1.distance(v2)</code></div> <div> </div> <div><code>v1.distanceSq(v2)</code></div> <div> </div> <div><code>v1.distanceManhattan(v2)</code></div> <div> </div> <div><code>v1.distanceChebyshev(v2)</code></div> <div> </div></div>',1);function ie(X,Y){B(Y,!0);let v=b(D(new F(0,5))),t=b(D(new F(2.5,0)));const y=K(()=>[{name:"v1",vec:e(v),color:"#00FF00",onUpdate:s=>{M(v,s.clone().fixPrecision(1),!0)},isDraggable:!0},{name:"v2",vec:e(t),color:"#FF0000",onUpdate:s=>{M(t,s.clone().fixPrecision(1),!0)},isDraggable:!0}]);var p=O(),f=G(p);L(f,{title:"Distance methods"});var x=a(f,2);N(x,{grid:{size:10,graduation:1},get vectors(){return e(y)}});var h=a(x,2),o=a(i(h),2),C=i(o,!0);d(o);var c=a(o,4),S=i(c,!0);d(c);var n=a(c,4),V=i(n,!0);d(n);var _=a(n,4),q=i(_,!0);d(_);var m=a(_,4),w=i(m,!0);d(m);var u=a(m,4),P=i(u,!0);d(u);var l=a(u,4),U=i(l,!0);d(l);var g=a(l,4),$=i(g,!0);d(g),d(h),H((s,k,z,T,W,Z,j,A)=>{r(C,s),r(S,k),r(V,z),r(q,T),r(w,W),r(P,Z),r(U,j),r($,A)},[()=>e(v).absDistanceX(e(t)),()=>e(v).distanceX(e(t)),()=>e(v).absDistanceY(e(t)),()=>e(v).distanceY(e(t)),()=>e(v).distance(e(t)),()=>e(v).distanceSq(e(t)),()=>e(v).distanceManhattan(e(t)),()=>e(v).distanceChebyshev(e(t))]),I(X,p),J()}export{ie as component};
