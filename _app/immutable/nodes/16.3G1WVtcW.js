import"../chunks/DsnmJJEf.js";import{p as push,s as state,a as proxy,f as from_html,b as first_child,h as set,$ as child,g as get,c as append,d as pop,e as sibling,u as user_derived,z as next,a0 as reset}from"../chunks/CY1iBhr2.js";import{d as delegate}from"../chunks/hDrwkfIk.js";import{r as remove_input_defaults}from"../chunks/cAKsN3DC.js";import{b as bind_value}from"../chunks/CVuNliJ1.js";import{M as Main}from"../chunks/Bv3YwKo1.js";import{M as Main$1}from"../chunks/Co6q3R2A.js";import{V as Vector}from"../chunks/DnDkWYNL.js";var on_click=(_,v1,rotateByAngle)=>set(v1,get(v1).clone().rotateBy(eval(get(rotateByAngle))),!0),on_click_1=(s,i,t)=>set(i,get(i).clone().rotateByDeg(Number(get(t))),!0),on_click_2=(__2,v1,rotateToAngle)=>set(v1,get(v1).clone().rotateTo(eval(get(rotateToAngle))),!0),on_click_3=(s,i,t)=>set(i,get(i).clone().rotateToDeg(Number(get(t))),!0),on_click_4=(__4,v1,v2,rotateTowardsAngle)=>set(v1,get(v1).clone().rotateTowards(get(v2),eval(get(rotateTowardsAngle))),!0),on_click_5=(s,i,t,a)=>set(i,get(i).clone().rotateTowardsDeg(get(t),Number(get(a))),!0),root=from_html(`<!> <p>The rotation methods take as a parameter a number representing an angle. To let you test the
    methods taking an angle in radians, this page lets you input parameters as strings which are
    evaluated with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval"><code>eval()</code></a>.</p> <p>This way you can use a number or a valid javascript expression like <code>Math.PI/3</code> as you
    would in your code.</p> <p>Then you can drag the vector to its initial position then click <button disabled>rotate</button> to see how the methods modify the vector.</p> <!> <div class="results svelte-1y8cmhb"><div class="result-code svelte-1y8cmhb"><code>v.rotateBy( <input class="inline-input" type="string"/> )</code></div> <div class="result-value svelte-1y8cmhb"><button>Rotate</button></div> <div class="result-code svelte-1y8cmhb"><code>v.rotateByDeg( <input class="inline-input" type="string"/> )</code></div> <div class="result-value svelte-1y8cmhb"><button>Rotate</button></div> <div class="result-code svelte-1y8cmhb"><code>v.rotateTo( <input class="inline-input" type="string"/> )</code></div> <div class="result-value svelte-1y8cmhb"><button>Rotate</button></div> <div class="result-code svelte-1y8cmhb"><code>v.rotateToDeg( <input class="inline-input" type="string"/> )</code></div> <div class="result-value svelte-1y8cmhb"><button>Rotate</button></div></div> <br/> <!> <div class="results svelte-1y8cmhb"><div class="result-code svelte-1y8cmhb"><code>v1.rotateTowards(v2, <input class="inline-input" type="string"/> )</code></div> <div class="result-value svelte-1y8cmhb"><button>Rotate</button></div> <div class="result-code svelte-1y8cmhb"><code>v.rotateTowardsDeg(v2, <input class="inline-input" type="string"/> )</code></div> <div class="result-value svelte-1y8cmhb"><button>Rotate</button></div></div>`,1);function _page(s,i){push(i,!0);let t=state(proxy(new Vector(2,0))),a=state(proxy(new Vector(0,4)));const O=user_derived(()=>[{name:"v",vec:get(t),color:"#00FF00",onUpdate:e=>{set(t,e.clone().fixPrecision(1),!0)},isDraggable:!0}]);let r=state("Math.PI / 4"),o=state(45),l=state("Math.PI / 3"),n=state(45),c=state("Math.PI / 12"),v=state(5);const W=user_derived(()=>[{name:"v1",vec:get(t),color:"#00FF00",onUpdate:e=>{set(t,e.clone().fixPrecision(1),!0)},isDraggable:!0},{name:"v2",vec:get(a),color:"#FF0000",onUpdate:e=>{set(a,e.clone().fixPrecision(1),!0)},isDraggable:!0}]);var w=root(),x=first_child(w);Main(x,{title:"Rotation methods"});var A=sibling(x,8);Main$1(A,{grid:{size:10,graduation:1},get vectors(){return get(O)}});var d=sibling(A,2),u=child(d),D=child(u),M=sibling(child(D));remove_input_defaults(M),next(),reset(D),reset(u);var g=sibling(u,2),q=child(g);q.__click=[on_click,t,r],reset(g);var b=sibling(g,2),B=child(b),R=sibling(child(B));remove_input_defaults(R),next(),reset(B),reset(b);var p=sibling(b,2),C=child(p);C.__click=[on_click_1,t,o],reset(p);var h=sibling(p,2),P=child(h),F=sibling(child(P));remove_input_defaults(F),next(),reset(P),reset(h);var m=sibling(h,2),E=child(m);E.__click=[on_click_2,t,l],reset(m);var y=sibling(m,2),z=child(y),I=sibling(child(z));remove_input_defaults(I),next(),reset(z),reset(y);var U=sibling(y,2),H=child(U);H.__click=[on_click_3,t,n],reset(U),reset(d);var V=sibling(d,4);Main$1(V,{grid:{size:10,graduation:1},get vectors(){return get(W)}});var $=sibling(V,2),f=child($),N=child(f),j=sibling(child(N));remove_input_defaults(j),next(),reset(N),reset(f);var k=sibling(f,2),K=child(k);K.__click=[on_click_4,t,a,c],reset(k);var T=sibling(k,2),S=child(T),G=sibling(child(S));remove_input_defaults(G),next(),reset(S),reset(T);var J=sibling(T,2),L=child(J);L.__click=[on_click_5,t,a,v],reset(J),reset($),bind_value(M,()=>get(r),e=>set(r,e)),bind_value(R,()=>get(o),e=>set(o,e)),bind_value(F,()=>get(l),e=>set(l,e)),bind_value(I,()=>get(n),e=>set(n,e)),bind_value(j,()=>get(c),e=>set(c,e)),bind_value(G,()=>get(v),e=>set(v,e)),append(s,w),pop()}delegate(["click"]);export{_page as component};
