import"../chunks/DsnmJJEf.js";import{z as F,L as V,M as q,A as w,C as y,F as A,G as B,B as t,I as a,v as e,N as r,J as o,x as C}from"../chunks/B6V4Mh0Q.js";import{V as G,M as J,a as d}from"../chunks/CPznaXQM.js";var L=w('<!> <div class="results svelte-6zq5v2"><div><h3><code>v1.invert()</code></h3> <!></div> <div><h3><code>v1.invertX()</code></h3> <!></div> <div><h3><code>v1.invertY()</code></h3> <!></div></div>',1);function $(u,p){F(p,!0);let v=V(q(new G(0,3))),h=r(()=>e(v).clone().invert()),_=r(()=>e(v).clone().invertX()),b=r(()=>e(v).clone().invertY());const n=r(()=>[{name:"v1",vec:e(v),color:"#00FF00",onUpdate:z=>{C(v,z.clone().fixPrecision(1),!0)},isDraggable:!0}]),I=r(()=>[...e(n),{name:"v1.invert()",vec:e(h),color:"#6e6ef4",isDraggable:!1}]),X=r(()=>[...e(n),{name:"v1.invertX()",vec:e(_),color:"#f46ef4",isDraggable:!1}]),Y=r(()=>[...e(n),{name:"v1.invertY()",vec:e(b),color:"#b16ef4",isDraggable:!1}]),s={size:10,graduation:1};var l=L(),g=y(l);J(g,{title:"Inversion methods"});var f=t(g,2),i=a(f),x=t(a(i),2);d(x,{get grid(){return s},get vectors(){return e(I)}}),o(i);var c=t(i,2),D=t(a(c),2);d(D,{get grid(){return s},get vectors(){return e(X)}}),o(c);var m=t(c,2),M=t(a(m),2);d(M,{get grid(){return s},get vectors(){return e(Y)}}),o(m),o(f),A(u,l),B()}export{$ as component};
