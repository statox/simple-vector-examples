import"../chunks/DsnmJJEf.js";import{S as F,_ as O,$ as V,l as C,V as w,W as z,m as D,X as S,T as s,C as e,a0 as d,Y as r,F as T,Z as o}from"../chunks/DPwOY9Ev.js";import{a as c}from"../chunks/CVJGeIlM.js";import{M as U}from"../chunks/D9YKBaSm.js";import{M as W}from"../chunks/B17B5uQ6.js";import{V as X}from"../chunks/COKwq80w.js";var Y=C('<!> <!> <div class="results svelte-86hevj"><div><code>v.toArray()</code></div> <div><code> </code></div> <div><code>v.toObject()</code></div> <div><code> </code></div> <div><code>v.toPolar()</code></div> <div><code> </code></div></div>',1);function H(x,h){F(h,!0);let a=O(V(new X(0,2.5)));const $=d(()=>{const t=e(a).toArray();return`[${t[0]}, ${t[1]}]`}),y=d(()=>{const t=e(a).toObject();return`{x : ${t.x}, y: ${t.y}}`}),b=d(()=>{const t=e(a).toPolar();return`{r : ${t.r}, theta: ${t.theta}}`}),j=d(()=>[{name:"v",vec:e(a),color:"#00FF00",onUpdate:t=>{T(a,t.clone().fixPrecision(1),!0)},isDraggable:!0}]);var n=Y(),l=w(n);U(l,{title:"Constructor methods"});var m=s(l,2);W(m,{grid:{size:10,graduation:1},get vectors(){return e(j)}});var u=s(m,2),i=s(r(u),2),p=r(i),M=r(p,!0);o(p),o(i);var v=s(i,4),_=r(v),P=r(_,!0);o(_),o(v);var f=s(v,4),g=r(f),A=r(g,!0);o(g),o(f),o(u),z(()=>{c(M,e($)),c(P,e(y)),c(A,e(b))}),D(x,n),S()}export{H as component};
